Lambdas
Another very useful way of starting a thread and passing information to it is by using a lambda expression ("Lambda" for short).
With a Lambda you can easily create simple function objects.


 C ++ - Lambdas have the properties of being unnamed and capturing variables from the surrounding context,
 but lack the ability to execute and return functions.

A Lambda is often used as an argument for functions that can take a callable object. 
This can be easier than creating a named function that is used only when passed as an argument. 
In such cases, Lambdas are generally preferred because they allow the function objects to be defined inline. 
If Lambdas were not available, we would have to define an extra function somewhere else in our source file 
- which would work but at the expense of the clarity of the source code.

A Lambda is a function object (a "functor"), so it has a type and can be stored and passed around.
 Its result object is called a "closure", which can be called using the operator () as we will see shortly.

A lambda formally consists of three parts: 
a capture list [] , 
a parameter list () and
 a main part {}, which contains the code to be executed when the Lambda is called. Note that in principal all parts could be empty.

The capture list []: By default, variables outside of the enclosing {} around the main part of the Lambda can not be accessed.
 By adding a variable to the capture list however, it becomes available within the Lambda either as a copy or as a reference.
 The captured variables become a part of the Lambda.

By default, variables in the capture block can not be modified within the Lambda. 
Using the keyword "mutable" allows to modify the parameters captured by copy, 
and to call their non-const member functions within the body of the Lambda. 


Even though we have been using Lambdas in the above example in various ways, it is important to note that a Lambda does not exist at runtime.
 The runtime effect of a Lambda is the generation of an object, which is known as closure.
 The difference between a Lambda and the corresponding closure is similar to the distinction between a class and an instance of the class.
 A class exists only in the source code while the objects created from it exist at runtime.

We can use (a copy of) the closure (i.e. f0, f1, â€¦) to execute the code within the Lambda at a position in our program different to the line
 where the function object was created.

The parameter list () : The way parameters are passed to a Lambda is basically identical to calling a regular function.
 If the Lambda takes no arguments, these parentheses can be omitted (except when "mutable" is used)